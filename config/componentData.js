module.exports = /* eslint-disable */ [{"name":"AxisArea","description":"","props":{"connectDropTarget":{"type":{"name":"func"},"required":true,"description":"Connection to the drop target"},"isOver":{"type":{"name":"bool"},"required":true,"description":"Detects if there is an item over this area"},"canDrop":{"type":{"name":"bool"},"required":true,"description":"Detects if the item over this area can be dropped here"},"accepts":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":true,"description":"Detects the types of object valid to drop in this area"},"lastDroppedItem":{"type":{"name":"object"},"required":false,"description":"Detects which was the last item dropped"},"onDrop":{"type":{"name":"func"},"required":true,"description":"Action to release when a item is dropped"}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\n\nconst style = {\n\theight: '12rem',\n\twidth: '12rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tcolor: 'white',\n\tpadding: '1rem',\n\ttextAlign: 'center',\n\tfontSize: '1rem',\n\tlineHeight: 'normal',\n\tfloat: 'left',\n}\n\nconst AxisAreaTarget = {\n\tdrop(props, monitor) {\n\t\tprops.onDrop(monitor.getItem())\n\t},\n}\n\n\n\n@DropTarget(props => props.accepts, AxisAreaTarget,\n\t(connect, monitor) => ({\n\t\t\t\t\t\t\t\t\t\t\t\tconnectDropTarget: connect.dropTarget(),\n\t\t\t\t\t\t\t\t\t\t\t\tisOver: monitor.isOver(),\n\t\t\t\t\t\t\t\t\t\t\t\tcanDrop: monitor.canDrop(),\n}))\nexport default class AxisArea extends Component {\n\tstatic propTypes = {\n\t\t/** Connection to the drop target */\n\t\tconnectDropTarget: PropTypes.func.isRequired,\n\t\t/** Detects if there is an item over this area */\n\t\tisOver: PropTypes.bool.isRequired,\n\t\t/** Detects if the item over this area can be dropped here*/\n\t\tcanDrop: PropTypes.bool.isRequired,\n\t\t/** Detects the types of object valid to drop in this area*/\n\t\taccepts: PropTypes.arrayOf(PropTypes.string).isRequired,\n\t\t/** Detects which was the last item dropped*/\n\t\tlastDroppedItem: PropTypes.object,\n\t\t/** Action to release when a item is dropped*/\n\t\tonDrop: PropTypes.func.isRequired,\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\taccepts,\n\t\t\tisOver,\n\t\t\tcanDrop,\n\t\t\tconnectDropTarget,\n\t\t\tlastDroppedItem,\n\t\t} = this.props\n\t\tconst isActive = isOver && canDrop\n\n\t\tlet backgroundColor = '#cc3399'\n\t\tif (isActive) {\n\t\t\tbackgroundColor = '#ffccff'\n\t\t} else if (canDrop) {\n\t\t\tbackgroundColor = 'pink'\n\t\t}\n\n\t\treturn connectDropTarget(\n\t\t\t<div style={{ ...style, backgroundColor }}>\n\t\t\t\t{isActive\n\t\t\t\t\t? 'Release to drop'\n\t\t\t\t\t: `This AxisArea accepts a ${accepts.join(', ')}`}\n\n\t\t\t\t{lastDroppedItem && (\n\t\t\t\t\t<p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n\t\t\t\t)}\n\t\t\t</div>,\n\t\t)\n\t}\n}\n","examples":[]},{"name":"Column","description":"This component represent a column of a dataset","props":{"connectDragSource":{"type":{"name":"func"},"required":true,"description":"source where this item can be dropped"},"isDragging":{"type":{"name":"bool"},"required":true,"description":"flag to determine if the item is being dragged","defaultValue":{"value":"true","computed":false}},"name":{"type":{"name":"string"},"required":true,"description":"name","defaultValue":{"value":"'Column'","computed":false}},"type":{"type":{"name":"string"},"required":true,"description":"type of item to be dragged","defaultValue":{"value":"ItemTypes.COLUMN","computed":true}},"isDropped":{"type":{"name":"bool"},"required":true,"description":"flag to determine if it is being dragged","defaultValue":{"value":"true","computed":false}}},"code":"import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { DragSource } from 'react-dnd'\nimport ItemTypes from '../ItemTypes';\n\nconst style = {\n\tborder: '1px dashed gray',\n\tbackgroundColor: 'white',\n\tpadding: '0.5rem 1rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tcursor: 'move',\n\tfloat: 'left',\n}\n\nconst boxSource = {\n\tbeginDrag(props) {\n\t\treturn {\n\t\t\tname: props.name,\n\t\t}\n\t},\n}\n\n@DragSource(props => props.type, boxSource, (connect, monitor) => ({\n\tconnectDragSource: connect.dragSource(),\n\tisDragging: monitor.isDragging(),\n}))\n/** This component represent a column of a dataset*/\nexport default class Column extends Component {\n\tstatic propTypes = {\n\t\t/** source where this item can be dropped */\n\t\tconnectDragSource: PropTypes.func.isRequired,\n\t\t/** flag to determine if the item is being dragged*/\n\t\tisDragging: PropTypes.bool.isRequired,\n\t\t/** name */\n\t\tname: PropTypes.string.isRequired,\n\t\t/** type of item to be dragged*/\n\t\ttype: PropTypes.string.isRequired,\n\t\t/** flag to determine if it is being dragged*/\n\t\tisDropped: PropTypes.bool.isRequired,\n\t}\n\n\tstatic defaultProps={\n\t\tisDragging: true,\n\t\tname: 'Column',\n\t\ttype: ItemTypes.COLUMN,\n\t\tisDropped: true\n\t}\n\n\trender() {\n\t\tconst { name, isDropped, isDragging, connectDragSource } = this.props\n\t\tconst opacity = isDragging ? 0.4 : 1\n\n\t\treturn connectDragSource(\n\t\t\t<div style={{ ...style, opacity }}>\n\t\t\t\t{isDropped ? <s>{name}</s> : name}\n\t\t\t</div>,\n\t\t)\n\t}\n}\n","examples":[{"name":"ExampleColumn","description":"Custom Column just do see teh effects of dragging","code":"import React, { Component } from 'react';\nimport Column from 'components-app/Column/Column';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\n@DragDropContext(HTML5Backend)\n//export default function ExampleColumn(){\n/** Custom Column just do see teh effects of dragging */\nexport default class ExampleColumn extends Component{\n  render() {\n    return (\n            <Column name={'column'}\n                   type={'column'}\n                   isDropped={true}\n                   key={1}/>\n            )}\n}\n"}]},{"name":"Container","description":"","code":"import React, { Component } from 'react';\nimport update from 'immutability-helper';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend, { NativeTypes } from 'react-dnd-html5-backend';\nimport AxisArea from '../AxisArea/AxisArea';\nimport Column from '../Column/Column';\nimport ItemTypes from '../ItemTypes';\n\n@DragDropContext(HTML5Backend)\nexport default class Container extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\taxisArea: [\n\t\t\t\t{ accepts: [ItemTypes.COLUMN], lastDroppedItem: null }\n\t\t\t],\n\t\t\tcolumns: [\n\t\t\t\t{ name: 'ColumnA', type: ItemTypes.COLUMN }\n\t\t\t],\n\t\t\tdroppedColumnNames: [],\n\t\t}\n\t}\n\n\tisDropped(columnName) {\n\t\treturn this.state.droppedColumnNames.indexOf(columnName) > -1\n\t}\n\n\trender() {\n\t\tconst { columns, axisArea } = this.state\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t{axisArea.map(({ accepts, lastDroppedItem }, index) => (\n\t\t\t\t\t\t<AxisArea\n\t\t\t\t\t\t\taccepts={accepts}\n\t\t\t\t\t\t\tlastDroppedItem={lastDroppedItem}\n\t\t\t\t\t\t\tonDrop={item => this.handleDrop(index, item)}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t{columns.map(({ name, type }, index) => (\n\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\tisDropped={this.isDropped(name)}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\thandleDrop(index, item) {\n\t\tconst { name } = item\n\t\tconst droppedColumnNames = name ? { $push: [name] } : {}\n\n\t\tthis.setState(\n\t\t\tupdate(this.state, {\n\t\t\t\taxisArea: {\n\t\t\t\t\t[index]: {\n\t\t\t\t\t\tlastDroppedItem: {\n\t\t\t\t\t\t\t$set: item,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdroppedColumnNames,\n\t\t\t}),\n\t\t)\n\t}\n}\n\n//export default DragDropContext(HTML5Backend)(Container);\n","examples":[]}]